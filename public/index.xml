<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://chrisfoy.net/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Oct 2016 01:22:34 +0000</lastBuildDate>
    <atom:link href="https://chrisfoy.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About Christopher Foy</title>
      <link>https://chrisfoy.net/about/</link>
      <pubDate>Fri, 21 Oct 2016 01:22:34 +0000</pubDate>
      
      <guid>https://chrisfoy.net/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://chrisfoy.net/images/about_me.jpg&#34; alt=&#34;Christopher Foy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a software developer who&amp;rsquo;s been writing, deploying, and maintaining
web applications and services for 7 years. I have a Diploma in Software
Engineering from Mohawk College, a BA (Hon.) in English from Dalhousie,
and a BA in Classical Studies from the University of Ottawa. What can
I say? I like to learn.&lt;/p&gt;

&lt;p&gt;I live in Hamilton, Ontario with my wife, Jessica, where I enjoy making
pizza from scratch, catching wild Pok√©mon, and reading, especially
young adult vampire fiction and chefs&amp;rsquo; memoirs. I&amp;rsquo;m also a big CBC
Radio fan, particularly &lt;a href=&#34;http://www.cbc.ca/radio/undertheinfluence&#34;&gt;Under the Influence&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails Application Configuration Part 1</title>
      <link>https://chrisfoy.net/post/rails-application-configuration-part-1/</link>
      <pubDate>Thu, 20 Oct 2016 02:16:04 +0000</pubDate>
      
      <guid>https://chrisfoy.net/post/rails-application-configuration-part-1/</guid>
      <description>&lt;p&gt;A number of years ago, working in ASP.NET, when I wanted to make add configuration to web applications,
I knew of two main options: Web.config, and the database. The former (an XML file) was pretty much only
good for database connection strings. Using the database was hardly surprising then.  The database was
easy for applications to read from, and could be written to (i.e. configuration changed on a running
application) with any SQL client.&lt;/p&gt;

&lt;p&gt;In Rails we have different options. Rails itself provides several places: &lt;em&gt;application.rb&lt;/em&gt; and the
environment-specific files like &lt;em&gt;development.rb&lt;/em&gt; and &lt;em&gt;production.rb&lt;/em&gt;, as well as initializers under
&lt;em&gt;config/initializers&lt;/em&gt;. These are obviously just ruby and lead to storing configuration in singletons,
either &lt;code&gt;Rails.configuration&lt;/code&gt; or a global like &lt;code&gt;$redis&lt;/code&gt;. While where exactly to load different configuration
is an interesting topic, in this post I&amp;rsquo;m more concerned with where the values come from. The simplest
and most common are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Directly in ruby, in &lt;em&gt;production.rb&lt;/em&gt;, for example, like:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.deliver_email_digest = :weekly
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;In a YAML file, &lt;em&gt;config/redis.yml&lt;/em&gt; for example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;development:
  host: localhost
  port: 6379
  database: 0
production:
  host: 10.0.0.17
  port: 6379
  database: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;In an environment variable inside ruby, &lt;em&gt;config/initializers/redis.rb&lt;/em&gt; for example:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$redis = Redis.new(host: ENV[&amp;quot;REDIS_HOST&amp;quot;], port: ENV[&amp;quot;REDIS_PORT&amp;quot;], db: ENV[&amp;quot;REDIS_DATABSE&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Using ERB inside a YAML file to load an environment variable, like Rails does for &lt;em&gt;secrets.yml&lt;/em&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;development:
  secret_key_base: abcd
test:
  secret_key_base: efgh
production:
  secret_key_base: &amp;lt;%= ENV[&amp;quot;SECRET_KEY_BASE&amp;quot;] %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Directly putting values in ruby like &lt;code&gt;:weekly&lt;/code&gt; from the first example has fallen out of favour, in no small
part due to the influence of the &lt;a href=&#34;https://12factor.net/config&#34;&gt;Twelve-Factor App&lt;/a&gt;, which also
highlights the issues of managing standalone files (like the above-mentioned &lt;em&gt;config/redis.yml&lt;/em&gt;). Not wanting
to commit sensitive database credentials to version control, and the need for more flexible yet simple
configuration combinations do indeed call for different strategies.  The author of
that guide, Adam Wiggins, was at Heroku, so it&amp;rsquo;s natural that he recommends environment variables. Heroku
runs applications in containers which lends itself nicely to this practice. A container runs a single process
and setting the environment for this process is straightforward. Heroku provides both web and cli tools
for setting environment variables, so it&amp;rsquo;s a great option if you&amp;rsquo;re running your application there. Docker,
similarly, allows you to set environment variables in your &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENV POSTGRES_URL=&amp;quot;postgres://username:password@10.0.1.15/database&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re not running your application in containers, you can still use environment variables, but it&amp;rsquo;s
not as straightforward, and there are some issues to be aware of. In development, you &lt;em&gt;can&lt;/em&gt; run your
server like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REDIS_URL=&amp;quot;redis://localhost:6379/3&amp;quot; rails server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can imagine, no doubt, this quickly becomes unmanageable. That&amp;rsquo;s where the &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; gem
comes in. It allows you to load environment variables from a simple &lt;code&gt;.env&lt;/code&gt; file. The &lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt; gem similarly has the capability to load environment variables from the &lt;code&gt;.env&lt;/code&gt; file (or another
file specified in a command-line switch). Using foreman also has the benefit of being able to export your processes into Ubuntu upstart scripts. These scripts will also include environment variables from &lt;code&gt;.env&lt;/code&gt; which is very convenient
since upstart-run processes start with a mostly clean environment.&lt;/p&gt;

&lt;p&gt;Another particular challenge is zero-downtime deploys with a forking web server like unicorn. Replacing the running unicorn with a reload doesn&amp;rsquo;t give you an opportunity to reload environment variables. Workarounds like &lt;a href=&#34;https://github.com/intercity/chef-repo/issues/159#issuecomment-224311594&#34;&gt;this&lt;/a&gt; do work, but at this point you&amp;rsquo;re loading environment variables (in production) from a file, so it&amp;rsquo;s
essentially no different than loading your configuration directly from a file
instead of from the environment at this point.&lt;/p&gt;

&lt;p&gt;If you are using disposable containers on Heroku or with Docker, where updates are done through creating and destroying containers rather than have an existing master process exec a new master process, environment variables make perfect sense. Otherwise
you might as well stick to reading local YAML files since you&amp;rsquo;ll probably need
to explicitly reload environment variables from a file anyway.&lt;/p&gt;

&lt;p&gt;In part 2, I&amp;rsquo;ll examine application configuration with distributed key-value
stores. In other words, configuration in a database is back, provided it&amp;rsquo;s
not a relational database.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>